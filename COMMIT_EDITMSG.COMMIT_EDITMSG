removed new functions

# --------------
# Please enter the commit message for your changes. Everything below
# this paragraph is ignored, and an empty message aborts the commit.
# Just close the window to accept your message.
diff --git a/srs860.py b/srs860.py
index 474124f..5254589 100644
--- a/srs860.py
+++ b/srs860.py
@@ -64,7 +64,7 @@ def getSensitivityInt(v, mode):
     if mode == 0:
         sens = int(round(3*log10(v)))+26
     else:
-        sens = int(round(3*log10(v)))+2
+        sens = int(round(3*log10(v)))+2se
     return sens
 
 def getTCInt(t):
@@ -176,8 +176,8 @@ class sr860Wrapper(GPIBDeviceWrapper):
 
     @inlineCallbacks
     def sig_lvl(self):
-		resp = yield self.query('ILVL?')
-		returnValue(int(resp))
+        resp = yield self.query('ILVL?')
+        returnValue(int(resp))
 
     @inlineCallbacks
     def sine_out_amplitude(self,  amp = None):
@@ -375,24 +375,6 @@ class sr860Wrapper(GPIBDeviceWrapper):
             resp = yield self.query("SCAL?")
             returnValue(getSensitivity(int(resp)))
 
-    @inlineCallbacks
-    def auto_sensitivity(self):
-        waittime = yield self.wait_time(c)
-        r = yield self.r(c)
-        sens = yield self.sensitivity(c)
-        while r/sens > 0.95:
-            #print "sensitivity up... ",
-            yield self.sensitivity_up(c)
-            yield util.wakeupCall(waittime)
-            r = yield self.r(c)
-            sens = yield self.sensitivity(c)
-        while r/sens < 0.35:
-            #print "sensitivity down... ",
-            yield self.sensitivity_down(c)
-            yield util.wakeupCall(waittime)
-            r = yield self.r(c)
-            sens = yield self.sensitivity(c)
-
     @inlineCallbacks
     def auto_gain(self):
         yield self.write("AGAN");
@@ -411,21 +393,6 @@ class sr860Wrapper(GPIBDeviceWrapper):
             yield self.write('OFSL ' + str(i))
             returnValue(i)
 
-    @inlineCallbacks
-    def wait_time(self):
-        tc = yield self.query("OFLT?")
-        tc = getTC(int(tc))
-        slope = yield self.query("OFSL?")
-        slope = int(slope)
-        if slope == 0:
-            returnValue(5*tc)
-        elif slope == 1:
-            returnValue(7*tc)
-        elif slope == 2:
-            returnValue(9*tc)
-        else:# slope == 3:
-            returnValue(10*tc)
-
 
 class sr860Server(GPIBManagedServer):
     name = 'sr860'
@@ -498,8 +465,8 @@ class sr860Server(GPIBManagedServer):
     @setting(104, 'Reference', ref=[': query reference source', 'i: set external (0) or internal (1) reference source'], returns='i')
     def reference(self, c, ref = None):
         """
-		sets/gets the reference source. (internal source = 0 ; external source = 1 ; dual = 2 ; chop = 3)
-		"""
+        sets/gets the reference source. (internal source = 0 ; external source = 1 ; dual = 2 ; chop = 3)
+        """
         dev = self.selectedDevice(c)
         if ref is None:
             resp = yield dev.reference()
@@ -675,7 +642,7 @@ class sr860Server(GPIBManagedServer):
         if int(n) < 1 or int(n) > 4:
             raise ValueError("n must be 1,2,3, or 4!")
         else:
-			n = int(n) - 1
+            n = int(n) - 1
         resp = yield dev.aux_input(n)
         returnValue(float(resp))
 
@@ -686,7 +653,7 @@ class sr860Server(GPIBManagedServer):
         if int(n) < 1 or int(n) > 4:
             raise ValueError("n must be 1,2,3, or 4!")
         else:
-			n = int(n) - 1
+            n = int(n) - 1
         if v is None:
             resp = yield dev.aux_output(n)
             returnValue(float(resp))
@@ -774,29 +741,26 @@ class sr860Server(GPIBManagedServer):
     def time_constant(self, c, tc=None):
         """ Set/get the time constant. i=0 --> 1 us; 1-->3us, 2-->10us, 3-->30us, ..., 21 --> 30ks """
         dev = self.selectedDevice(c)
-        if tc is None:
-            resp = yield dev.query("OFLT?")
-            returnValue(getTC(int(resp)))
-        else:
+        if tc is not None:
             tc = getTCInt(tc)
             yield dev.write('OFLT {}'.format(tc))
-            resp = yield dev.query("OFLT?")
-            returnValue(getTC(int(resp)))
+        resp = yield dev.query("OFLT?")
+        returnValue(getTC(int(resp)))
 
     @setting(130, 'Sensitivity', i='v', returns='v')
     def sensitivity(self, c, i=None):
         """ Set/get the sensitivity. To set the sensitivity, input the voltage sensitivity in Volts or the current sensitivity in Amps.
 
-		Lookup table in the manual: i=27 --> 1 nV/fA; 26-->5nV/fA, 25-->10nV/fA, 24-->20nV/fA, ..., 0 --> 1V/uA
-		"""
+        Lookup table in the manual: i=27 --> 1 nV/fA; 26-->5nV/fA, 25-->10nV/fA, 24-->20nV/fA, ..., 0 --> 1V/uA
+        """
         dev = self.selectedDevice(c)
         iv_mode = yield dev.input_mode()
         if int(iv_mode) == 0:
-			u = units.V
+            u = units.V
         elif int(iv_mode) == 1:
-			u = units.A
+            u = units.A
         else:
-			u = 'none'
+            u = 'none'
         if i is None:
             resp = yield dev.sensitivity()
             if u != 'none':
@@ -878,7 +842,7 @@ class sr860Server(GPIBManagedServer):
     @setting(137, 'sensitivity_up', returns='v')
     def sensitivity_up(self, c):
         """ Increases the sensitivity one increment
-		"""
+        """
         dev = self.selectedDevice(c)
         sens = yield dev.query('SCAL?')
         if int(sens) < 27 and int(sens) >= 0:
@@ -891,7 +855,7 @@ class sr860Server(GPIBManagedServer):
     @setting(138, 'sensitivity_down', returns='v')
     def sensitivity_down(self, c):
         """ Decreases the sensitivity one increment
-		"""
+        """
         dev = self.selectedDevice(c)
         sens = yield dev.query('SCAL?')
         if int(sens) <= 27 and int(sens) > 0:
@@ -901,6 +865,46 @@ class sr860Server(GPIBManagedServer):
         resp = yield dev.query('SCAL?')
         returnValue(getSensitivity(resp))
 
+    @setting(139, 'Wait Time', returns='i')
+    def wait_time(self):
+        """Returns the recommended wait time given current time constant and low-pass filter slope."""
+        dev = self.selectedDevice(c)
+        tc = yield dev.query("OFLT?")
+        tc = getTC(int(tc))
+        slope = yield dev.query("OFSL?")
+        slope = int(slope)
+        if slope == 0:
+            returnValue(5*tc) # recommended 5
+        elif slope == 1:
+            returnValue(7*tc) # 7
+        elif slope == 2:
+            returnValue(9*tc)
+        else:# slope == 3:
+            returnValue(10*tc) # 10 etc.
+
+    @setting(140, "Auto Sensitivity")
+    def auto_sensitivity(self, c):
+        """Automatically adjusts sensitivity until signal is between 35% and 95% of full range"""
+
+        waittime = yield self.wait_time(c)
+        r = yield self.r(c)
+        sens = yield self.sensitivity(c)
+        mode = yield self.inputMode(c)
+        while r == 0:
+            sens = getSensitivity(getSensitivityInt(sens, mode)-5)
+            sens = yield self.sensitivity(c, sens)
+            r = yield self.r(c)
+
+        if r/sens < 0.35:
+            sens = getSensitivity(getSensitivityInt(r/0.35, mode))
+            sens = yield self.sensitivity(c, sens)
+            r = yield self.r(c)
+
+        while r/sens > 0.35:
+            yield self.sensitivity_up(c)
+            yield util.wakeupCall(waittime)
+            r = yield self.r(c)
+            sens = yield self.sensitivity(c)